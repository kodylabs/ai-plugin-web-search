{"version":3,"sources":["../src/actions/webSearch.ts","../src/services/webSearchService.ts","../src/templates/searchParamsTemplate.ts","../src/utils/searchUtils.ts","../src/examples/webSearchExamples.ts","../src/actions/webExtract.ts","../src/templates/extractParamsTemplate.ts","../src/templates/extractResponseTemplate.ts","../src/examples/webExtractExamples.ts","../src/services/webExtractService.ts","../src/types.ts","../src/index.ts"],"sourcesContent":["import {\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    elizaLogger,\n    composeContext,\n    generateObjectDeprecated,\n    ModelClass,\n} from \"@elizaos/core\";\nimport { WebSearchService } from \"../services/webSearchService\";\nimport type { SearchResult } from \"../types\";\nimport { searchParamsTemplate } from \"../templates/searchParamsTemplate\";\nimport { \n    isValidSearchParams, \n    MaxTokens, \n    DEFAULT_MAX_WEB_SEARCH_TOKENS\n} from \"../utils/searchUtils\";\nimport { webSearchExamples } from \"../examples/webSearchExamples\";\n\nexport const webSearch: Action = {\n    name: \"WEB_SEARCH\",\n    similes: [\n        \"SEARCH_WEB\",\n        \"INTERNET_SEARCH\",\n        \"LOOKUP\",\n        \"QUERY_WEB\",\n        \"FIND_ONLINE\",\n        \"SEARCH_ENGINE\",\n        \"WEB_LOOKUP\",\n        \"ONLINE_SEARCH\",\n        \"FIND_INFORMATION\",\n    ],\n    suppressInitialMessage: true,\n    description: \"Perform a web search to find information related to the message.\",\n    validate: async (runtime: IAgentRuntime) => {\n        return !!runtime.getSetting(\"TAVILY_API_KEY\");\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        state = (await runtime.composeState(message)) as State;\n        const userId = runtime.agentId;\n        elizaLogger.log(\"Original search query:\", message.content.text);\n\n        try {\n            const recentMessagesData = state.recentMessagesData || [];\n            \n            // Find the index of the current user message in the conversation\n            const currentUserMessageIndex = recentMessagesData.findIndex(m => \n                m.content && m.content.text === message.content.text);\n            \n            // Find the agent message that comes AFTER the last user message\n            let lastRelevantAgentMessage = null;\n            if (currentUserMessageIndex >= 0 && currentUserMessageIndex < recentMessagesData.length - 1) {\n                // Look for the first agent message after the current user message\n                for (let i = currentUserMessageIndex + 1; i < recentMessagesData.length; i++) {\n                    const m = recentMessagesData[i];\n                    if (m.agentId === message.agentId) {\n                        lastRelevantAgentMessage = m;\n                        break;\n                    }\n                }\n            }\n            \n            const searchParamsContext = composeContext({\n                state: {\n                    ...state,\n                    message: lastRelevantAgentMessage\n                },\n                template: searchParamsTemplate\n            });\n\n            const searchParams = await generateObjectDeprecated({\n                runtime,\n                context: searchParamsContext,\n                modelClass: ModelClass.SMALL,\n            });\n\n            // Validate extracted parameters\n            const isParamsValid = isValidSearchParams(searchParams);\n            if (!isParamsValid) {\n                elizaLogger.warn(\"Invalid search parameters, using defaults\");\n            }\n\n            // Use the reformulated search query from the template\n            const webSearchPrompt = searchParams.query;\n            elizaLogger.log(\"Using reformulated search query:\", webSearchPrompt);\n\n            // The 'limit' parameter from searchParams is passed to the WebSearchService\n            // where it's used as the 'maxResults' parameter in the Tavily API call\n            const webSearchService = new WebSearchService();\n            await webSearchService.initialize(runtime);\n            \n            // Create search options with proper type conversion\n            const searchOptions = isParamsValid ? {\n                limit: typeof searchParams.limit === 'string' \n                    ? parseInt(searchParams.limit, 10) \n                    : searchParams.limit,\n                type: searchParams.type\n            } : undefined;\n            \n            const searchResponse = await webSearchService.search(\n                webSearchPrompt,\n                searchOptions\n            );\n\n            if (searchResponse && searchResponse.results.length) {\n                // Explicitly limit the number of results to display\n                const limit = searchOptions?.limit || 1;\n                \n                // Take only the first 'limit' results\n                const limitedResults = searchResponse.results.slice(0, limit);\n                \n                const responseList = searchResponse.answer\n                    ? `${searchResponse.answer}${\n                          Array.isArray(limitedResults) &&\n                          limitedResults.length > 0\n                              ? `\\n\\nFor more details, you can check out these resources:\\n${limitedResults\n                                    .map(\n                                        (result: SearchResult, index: number) =>\n                                            `${index + 1}. [${result.title}](${result.url})`\n                                    )\n                                    .join(\"\\n\")}`\n                              : \"\"\n                      }`\n                    : \"\";\n                \n                callback({\n                    text: MaxTokens(responseList, DEFAULT_MAX_WEB_SEARCH_TOKENS),\n                });\n            } else {\n                elizaLogger.error(\"Search failed or returned no data\");\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in web search handler:\", error);\n        }\n    },\n    examples: webSearchExamples,\n} as Action;","import {\n    Service,\n    type IAgentRuntime,\n    ServiceType,\n} from \"@elizaos/core\";\nimport { tavily } from \"@tavily/core\";\nimport type { \n    IWebSearchService, \n    SearchOptions, \n    SearchResponse,\n    TavilyClient\n} from \"../types\";\n\nexport class WebSearchService extends Service implements IWebSearchService {\n    public tavilyClient: TavilyClient\n\n    async initialize(_runtime: IAgentRuntime): Promise<void> {\n        const apiKey = _runtime.getSetting(\"TAVILY_API_KEY\") as string;\n        if (!apiKey) {\n            throw new Error(\"TAVILY_API_KEY is not set\");\n        }\n        this.tavilyClient = tavily({ apiKey });\n    }\n\n    getInstance(): IWebSearchService {\n        return WebSearchService.getInstance();\n    }\n\n    static get serviceType(): ServiceType {\n        return ServiceType.WEB_SEARCH;\n    }\n\n    async search(\n        query: string,\n        options?: SearchOptions,\n    ): Promise<SearchResponse> {\n        try {\n            let maxResults = 1;\n            \n            if (options && options.limit !== undefined) {\n                maxResults = typeof options.limit === 'string' \n                    ? parseInt(options.limit, 10) \n                    : options.limit;\n            }\n            \n            const tavilyOptions = {\n                includeAnswer: options?.includeAnswer ?? true,\n                maxResults: maxResults,\n                topic: options?.type || \"general\",\n                searchDepth: options?.searchDepth || \"basic\",\n                includeImages: options?.includeImages || false,\n                days: options?.days || 3,\n            };\n            \n            const response = await this.tavilyClient.search(query, tavilyOptions);\n            \n            return response;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","/**\n * Template to extract search parameters from user query.\n * This template is used by the LLM to analyze the query and extract:\n * 1. The number of results desired (default: 1)\n * 2. The type of search (news or general, default: general)\n * 3. A reformulated search query for better results\n */\nexport const searchParamsTemplate = `\nAnalyze the following message and extract these parameters:\n1. The number of results desired (default: 1)\n2. The type of search (news or general, default: general)\n3. A reformulated search query that will yield the best search results\n\nReturn a JSON object with these parameters:\n\nExample response:\n\\`\\`\\`json\n{\n    \"limit\": 3,\n    \"type\": \"news\",\n    \"query\": \"SpaceX recent rocket launches and achievements\"\n}\n\\`\\`\\`\n\nIf no number of results is specified, set \"limit\" to 1.\nIf no type is specified, set \"type\" to \"general\".\nAlways include a reformulated \"query\" that is clear, specific, and optimized for search engines.\n\nIMPORTANT: Your reformulated query should:\n- Stay faithful to the original request\n- NOT add specific topics or technologies that weren't mentioned\n- NOT assume specific use cases unless clearly stated\n- Focus on the main subject of the query\n- Be concise and clear\n\nHere are some examples of how to interpret queries:\n- \"Find me 5 articles about AI\" → limit: 5, type: \"general\", query: \"artificial intelligence latest developments\"\n- \"What are the latest news about SpaceX?\" → limit: 1, type: \"news\", query: \"SpaceX recent news\"\n- \"Give me multiple sources about climate change\" → limit: 5, type: \"general\", query: \"climate change information\"\n- \"Find detailed information about quantum computing\" → limit: 3, type: \"general\", query: \"quantum computing overview\"\n- \"Show me recent developments in blockchain\" → limit: 3, type: \"news\", query: \"blockchain recent developments\"\n- \"Can you look up information about Cursor?\" → limit: 1, type: \"general\", query: \"Cursor software information\"\n\nMessage to analyze: {{message}}\n\nExtract the search parameters from the message above. Reformulate the query for better search results. Respond with a JSON markdown block.\n`; ","import { encodingForModel, type TiktokenModel } from \"js-tiktoken\";\nimport type { SearchOptions } from \"../types\";\n\nexport const DEFAULT_MAX_WEB_SEARCH_TOKENS = 4000;\nexport const DEFAULT_MODEL_ENCODING = \"gpt-3.5-turbo\";\n\n/**\n * Calculate the total number of tokens in a string\n */\nexport function getTotalTokensFromString(\n    str: string,\n    encodingName: TiktokenModel = DEFAULT_MODEL_ENCODING\n) {\n    const encoding = encodingForModel(encodingName);\n    return encoding.encode(str).length;\n}\n\n/**\n * Limit a string to a maximum number of tokens\n */\nexport function MaxTokens(\n    data: string,\n    maxTokens: number = DEFAULT_MAX_WEB_SEARCH_TOKENS\n): string {\n    if (getTotalTokensFromString(data) >= maxTokens) {\n        return data.slice(0, maxTokens);\n    }\n    return data;\n}\n\n/**\n * Validate extracted search parameters and convert strings to numbers if necessary\n */\nexport function isValidSearchParams(params: any): params is SearchOptions {\n    if (typeof params !== 'object' || params === null) {\n        return false;\n    }\n    \n    // Check limit\n    if ('limit' in params) {\n        // If limit is a string, try to convert it to a number\n        if (typeof params.limit === 'string') {\n            const parsedLimit = parseInt(params.limit, 10);\n            if (isNaN(parsedLimit) || parsedLimit < 1) {\n                return false;\n            }\n            // Automatically convert to number\n            params.limit = parsedLimit;\n        } else if (typeof params.limit !== 'number' || params.limit < 1 || !Number.isInteger(params.limit)) {\n            return false;\n        }\n    }\n    \n    // Check type\n    if ('type' in params) {\n        if (typeof params.type !== 'string' || (params.type !== 'news' && params.type !== 'general')) {\n            return false;\n        }\n    }\n    \n    return true;\n} ","/**\n * Examples of web search usage for the agent\n * These examples help the agent understand how to use the web search action\n */\nexport const webSearchExamples = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Find the latest news about SpaceX launches.\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here is the latest news about SpaceX launches:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can you find 3 details about the iPhone 16 release?\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here are the details I found about the iPhone 16 release:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What is the schedule for the next FIFA World Cup?\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here is the schedule for the next FIFA World Cup:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: { text: \"Check the latest stock price of Tesla.\" },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here is the latest stock price of Tesla I found:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Find 5 trending movies in the US.\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here are the current trending movies in the US:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What is the latest score in the NBA finals?\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here is the latest score from the NBA finals:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: { text: \"When is the next Apple keynote event?\" },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here is the information about the next Apple keynote event:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n]; ","import { \n    type Action, \n    type IAgentRuntime, \n    type Memory, \n    type State, \n    type HandlerCallback,\n    elizaLogger,\n    composeContext,\n    generateObject,\n    generateText,\n    ModelClass\n} from \"@elizaos/core\";\nimport { extractParamsTemplate } from \"../templates/extractParamsTemplate\";\nimport { extractResponseTemplate } from \"../templates/extractResponseTemplate\";\nimport { webExtractExamples } from \"../examples/webExtractExamples\";\nimport { WebExtractService } from \"../services/webExtractService\";\nimport { \n    ExtractParamsSchema, \n    type ExtractParams,\n    type SuccessfulExtractResult, \n    type FailedExtractResult \n} from \"../types\";\n\nexport const webExtract: Action = {\n    name: \"WEB_EXTRACT\",\n    similes: [\n        \"EXTRACT_FROM_WEB\",\n        \"EXTRACT_FROM_URL\",\n        \"EXTRACT_FROM_PAGE\",\n        \"EXTRACT_FROM_HTML\",\n        \"EXTRACT_FROM_WEB_PAGE\",\n        \"LOOKUP_URL\",\n        \"LOOKUP_WEB_PAGE\",\n        \"LOOKUP_WEB_URL\",\n        \"LOOKUP_WEB_PAGE_URL\",\n        \"WEB_EXTRACT_INFORMATION\",\n        \"WEB_EXTRACT_FROM_URL\",\n        \"WEB_EXTRACT_FROM_PAGE\",\n        \"URL_EXTRACT\",\n    ],\n    suppressInitialMessage: true,\n    description: \"Perform a web urls information extraction\",\n    validate: async (runtime: IAgentRuntime) => {\n        return !!runtime.getSetting(\"TAVILY_API_KEY\");\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        state = (await runtime.composeState(message)) as State;\n        let extractResponse;\n        let extractionResultsText = \"\";\n        let status = \"success\"; // Default status\n\n        try {\n            // Use the template to extract URLs and options\n            const extractParamsContext = composeContext({\n                state: {\n                    ...state,\n                    message: message.content.text\n                },\n                template: extractParamsTemplate\n            });\n\n            const extractParams = await generateObject({\n                runtime,\n                context: extractParamsContext,\n                modelClass: ModelClass.SMALL,\n                schema: ExtractParamsSchema,\n                schemaName: \"ExtractParams\",\n                schemaDescription: \"Parameters for web extraction including URLs and options\"\n            });\n            \n            const { urls, includeImages, extractDepth } = extractParams.object as ExtractParams;\n            \n            const extractOptions = {\n                includeImages: includeImages ?? false,\n                extractDepth: extractDepth || \"basic\"\n            };\n\n            const webExtractService = new WebExtractService();\n            await webExtractService.initialize(runtime);\n\n            try {\n                extractResponse = await webExtractService.extract(\n                    urls,\n                    extractOptions\n                );\n                \n                if (extractResponse && extractResponse.results.length) {\n                    // Provide raw data to the LLM without pre-processing\n                    extractResponse.results.forEach((result: SuccessfulExtractResult, index: number) => {\n                        extractionResultsText += `URL: ${result.url}\\n`;\n                        extractionResultsText += `Content: ${result.raw_content}\\n`;\n                        if (result.images && result.images.length > 0) {\n                            extractionResultsText += `Images: ${result.images.length}\\n`;\n                        }\n                        extractionResultsText += \"\\n---\\n\\n\";\n                    });\n                    \n                    if (extractResponse.failed_results && extractResponse.failed_results.length > 0) {\n                        extractionResultsText += \"Failed URLs:\\n\";\n                        extractResponse.failed_results.forEach((result: FailedExtractResult) => {\n                            extractionResultsText += `${result.url} - ${result.error}\\n`;\n                        });\n                    }\n                    \n                    status = \"success\";\n                } else {\n                    extractionResultsText = \"Could not extract content from the provided URLs. Please check that the URLs are accessible and try again.\\n\";\n                    status = \"no_results\";\n                }\n            } catch (error) {\n                elizaLogger.error(\"Error in web extract handler:\", error);\n                extractionResultsText = `An error occurred while extracting from URLs: ${error.message || \"Unknown error\"}\\n`;\n                status = \"error\";\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in web extract handler:\", error);\n            extractionResultsText = `An error occurred while processing your request: ${error.message || \"Unknown error\"}`;\n            status = \"error\";\n        }\n        \n        // Use the template to format the response - single LLM call for all cases\n        const responseContext = composeContext({\n            state: {\n                ...state,\n                extractionResults: extractionResultsText,\n                responseTime: extractResponse ? extractResponse.response_time : 0,\n                status: status,\n                message: message.content.text\n            },\n            template: extractResponseTemplate\n        });\n        \n        const formattedResponse = await generateText({\n            runtime,\n            context: responseContext,\n            modelClass: ModelClass.MEDIUM,\n        });\n        \n        callback({\n            text: formattedResponse\n        });\n    },\n    examples: webExtractExamples\n} as Action;","/**\n * Template to extract URLs and options for web extraction.\n * This template is used by the LLM to analyze the query and extract:\n * 1. The URLs to extract content from\n * 2. Whether to include images (default: false)\n * 3. The extraction depth (basic or advanced, default: basic)\n */\nexport const extractParamsTemplate = `\nAnalyze the following message and extract these parameters:\n1. The URLs to extract content from (up to 20 URLs)\n2. Whether to include images (default: false)\n3. The extraction depth (basic or advanced, default: basic)\n\nReturn a JSON object with these parameters. The JSON MUST be valid and properly formatted.\n\nExample response:\n\\`\\`\\`json\n{\n    \"urls\": [\n        \"https://en.wikipedia.org/wiki/Artificial_intelligence\",\n        \"https://en.wikipedia.org/wiki/Machine_learning\"\n    ],\n    \"includeImages\": true,\n    \"extractDepth\": \"advanced\"\n}\n\\`\\`\\`\n\nIMPORTANT FORMATTING RULES:\n- \"includeImages\" MUST be a boolean value (true or false without quotes), NOT a string\n- \"extractDepth\" MUST be a string (\"basic\" or \"advanced\" with quotes)\n- \"urls\" MUST be an array of strings, even if empty\n\nIf no image preference is specified, set \"includeImages\" to false (without quotes).\nIf no extraction depth is specified, set \"extractDepth\" to \"basic\" (with quotes).\n\nIMPORTANT CONTENT RULES:\n- Extract ALL URLs mentioned in the message\n- URLs must be valid and complete (starting with http:// or https://)\n- Maximum 20 URLs can be processed at once\n- Do not add URLs that weren't mentioned\n- If a URL is incomplete (e.g., \"wikipedia.org/wiki/Python\"), add the appropriate prefix (e.g., \"https://en.wikipedia.org/wiki/Python\")\n\nHere are some examples of how to interpret queries:\n- \"Extract content from https://en.wikipedia.org/wiki/Artificial_intelligence\" → {\"urls\": [\"https://en.wikipedia.org/wiki/Artificial_intelligence\"], \"includeImages\": false, \"extractDepth\": \"basic\"}\n- \"Get information from these pages: https://example.com and https://example.org with images\" → {\"urls\": [\"https://example.com\", \"https://example.org\"], \"includeImages\": true, \"extractDepth\": \"basic\"}\n- \"Extract detailed content from https://docs.python.org/3/\" → {\"urls\": [\"https://docs.python.org/3/\"], \"includeImages\": false, \"extractDepth\": \"advanced\"}\n\nMessage to analyze: {{message}}\n\nExtract the URLs and options from the message above. Respond ONLY with a valid JSON object, nothing else.\n`; ","/**\n * Template to format web content extraction response.\n * This template is used by the LLM to present extraction results\n * in a clear and readable way.\n */\nexport const extractResponseTemplate = `\nUser question or request:\n{{message}}\n\nContent available:\n{{extractionResults}}\n\nStatus: {{status}}\n\nResponse rules:\n1. If status is \"error\":\n   - Explain what went wrong in a helpful way\n   - If possible, suggest what might fix the issue\n   - Format: \"Sorry, I couldn't access the content: [reason]. [suggestion if possible]\"\n\n2. If status is \"no_results\":\n   - Check if the URL seems valid\n   - If URL looks invalid, suggest checking the format\n   - If URL looks valid, suggest it might be temporarily inaccessible\n   - Format: \"I couldn't find the information. [reason and suggestion]\"\n\n3. If status is \"success\":\n   a. Focus on answering the specific user question or request:\n      - Carefully read the user's question/request\n      - Look ONLY for information that directly answers it\n      - Ignore irrelevant content even if interesting\n      - Don't include full page content or unnecessary details\n\n   b. When relevant information is found:\n      - Answer the question directly and precisely\n      - Include ONLY facts that relate to the question\n      - Use bullet points if multiple relevant facts\n      - Keep technical details only if specifically asked\n      - Format: Direct answer to the question, nothing more\n\n   c. If the specific answer isn't found:\n      - Only mention relevant related information\n      - Explain specifically what part of the question couldn't be answered\n      - Format: \"Regarding [specific question], I found [relevant facts only]. However, [specific missing detail] isn't mentioned.\"\n\n4. Language:\n   - Match the language of the user's message\n   - Keep technical terms in their original language\n   - Be direct but friendly\n   - Use clear, simple language\n\nRemember: Answer ONLY what was asked, be precise and concise.`; ","/**\n * Examples of web extraction usage for the agent\n * These examples help the agent understand how to extract information from specific web pages\n */\nexport const webExtractExamples = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What are the main features of the latest iPhone? Here's the page: https://www.apple.com/iphone/\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here are the main features of the latest iPhone that I extracted from the page:\",\n                action: \"WEB_EXTRACT\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I'm interested in the Tesla Model 3 specs. Can you look at this page and tell me about them? https://www.tesla.com/model3/specs\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here are the technical specifications of the Tesla Model 3 that I extracted:\",\n                action: \"WEB_EXTRACT\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I want to make this lasagna recipe. What ingredients do I need and what are the steps? https://www.allrecipes.com/recipe/24074/alysias-basic-meat-lasagna/\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here are the ingredients and steps from the lasagna recipe that I extracted:\",\n                action: \"WEB_EXTRACT\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I need to understand the main points of this scientific article for my research. Can you help? https://www.nature.com/articles/s41586-020-2649-2\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here are the main conclusions from the scientific article that I extracted:\",\n                action: \"WEB_EXTRACT\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I'm looking for events to attend this weekend. Can you check these sites and tell me what's happening? https://www.eventbrite.com/ and https://www.meetup.com/\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here's the information about upcoming events that I extracted from both sites:\",\n                action: \"WEB_EXTRACT\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I want to buy a PlayStation 5 but I'm not sure where to get it. Can you compare the prices on these sites? https://www.amazon.com/PlayStation-5-Console-CFI-1215A01X/dp/B0BCNKKZ91 and https://www.bestbuy.com/site/sony-playstation-5-console/6523167.p\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here's a comparison of PlayStation 5 prices from the websites you provided:\",\n                action: \"WEB_EXTRACT\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the weather going to be like in New York for the next few days? Check this link: https://weather.com/weather/tenday/l/New+York+NY\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here's the weather forecast for New York that I extracted:\",\n                action: \"WEB_EXTRACT\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I'm trying to decide which programming language to learn. Can you help me understand the differences between Python and Java by looking at their docs? https://docs.python.org/3/ and https://docs.oracle.com/en/java/\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here are the main differences between Python and Java based on their documentation:\",\n                action: \"WEB_EXTRACT\",\n            },\n        },\n    ],\n];\n","import {\n    Service,\n    type IAgentRuntime,\n    ServiceType,\n} from \"@elizaos/core\";\nimport { tavily } from \"@tavily/core\";\nimport type { \n    IWebExtractService, \n    ExtractOptions, \n    ExtractResponse,\n    SuccessfulExtractResult,\n    FailedExtractResult,\n    TavilyClient\n} from \"../types\";\n\nexport class WebExtractService extends Service implements IWebExtractService {\n    public tavilyClient: TavilyClient;\n\n    async initialize(_runtime: IAgentRuntime): Promise<void> {\n        const apiKey = _runtime.getSetting(\"TAVILY_API_KEY\") as string;\n        if (!apiKey) {\n            throw new Error(\"TAVILY_API_KEY is not set\");\n        }\n        this.tavilyClient = tavily({ apiKey });\n    }\n\n    getInstance(): IWebExtractService {\n        return WebExtractService.getInstance();\n    }\n\n    static get serviceType(): ServiceType {\n        return ServiceType.WEB_SEARCH;\n    }\n\n    async extract(\n        urls: string[],\n        options?: ExtractOptions,\n    ): Promise<ExtractResponse> {\n        try {\n            const tavilyOptions = {\n                includeImages: options?.includeImages || false,\n            };\n\n            const tavilyResponse = await this.tavilyClient.extract(urls);\n            \n            const anyResponse = tavilyResponse as any;\n            \n            const successfulResults: SuccessfulExtractResult[] = (anyResponse.results || []).map((result: any) => ({\n                url: result.url,\n                raw_content: result.rawContent || result.content || \"\",\n                images: result.images\n            }));\n            \n            const failedResults: FailedExtractResult[] = (anyResponse.failedResults || []).map((result: any) => ({\n                url: result.url,\n                error: result.error || \"Unknown error\"\n            }));\n            \n            const response: ExtractResponse = {\n                results: successfulResults,\n                failed_results: failedResults,\n                response_time: anyResponse.responseTime || 0\n            };\n            \n            return response;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import type { Service } from \"@elizaos/core\";\nimport { tavily } from \"@tavily/core\";\nimport { z } from \"zod\";\n\nexport type TavilyClient = ReturnType<typeof tavily>;\n\n// Web Search Service\nexport interface IWebSearchService extends Service {\n    search(\n        query: string,\n        options?: SearchOptions,\n    ): Promise<SearchResponse>;\n}\n\nexport type SearchResult = {\n    title: string;\n    url: string;\n    content: string;\n    rawContent?: string;\n    score: number;\n    publishedDate?: string;\n};\n\nexport type SearchImage = {\n    url: string;\n    description?: string;\n};\n\n\nexport type SearchResponse = {\n    answer?: string;\n    query: string;\n    responseTime: number;\n    images: SearchImage[];\n    results: SearchResult[];\n};\n\n/**\n * Options for web search\n * Used both for Tavily API options and parameters extracted by the LLM\n */\nexport interface SearchOptions {\n    limit?: number;      // Number of results to return\n    type?: \"news\" | \"general\";  // Type of search\n    includeAnswer?: boolean;    // Include a generated answer\n    searchDepth?: \"basic\" | \"advanced\";  // Search depth\n    includeImages?: boolean;    // Include images\n    days?: number;       // Number of days to consider (1 = current day, 2 = last 2 days)\n}\n\nexport const ExtractParamsSchema = z.object({\n    urls: z.array(z.string().url()),\n    includeImages: z.boolean().optional(),\n    extractDepth: z.enum([\"basic\", \"advanced\"]).optional()\n});\n\nexport type ExtractParams = z.infer<typeof ExtractParamsSchema>;\n\n// Web Extract Service\nexport interface IWebExtractService extends Service {\n    extract(\n        urls: string[],\n        options?: ExtractOptions,\n    ): Promise<ExtractResponse>;\n}\n\n/**\n * Options for web extraction\n */\nexport interface ExtractOptions {\n    includeImages?: boolean; // Include images\n    extractDepth?: \"basic\" | \"advanced\";\n}\n\n/**\n * Successful result from extraction\n */\nexport type SuccessfulExtractResult = {\n    url: string;\n    raw_content: string;\n    images?: string[]; // Only available if includeImages is set to true\n};\n\n/**\n * Failed result from extraction\n */\nexport type FailedExtractResult = {\n    url: string;\n    error: string;\n};\n\n/**\n * Response from web extraction API\n */\nexport type ExtractResponse = {\n    results: SuccessfulExtractResult[];\n    failed_results: FailedExtractResult[];\n    response_time: number;\n};","import { webSearch } from \"./actions/webSearch\";\nimport { webExtract } from \"./actions/webExtract\";\n\nexport const webSearchPlugin = {\n    name: \"webSearch\",\n    description: \"Search the web and get news\",\n    actions: [webSearch, webExtract],\n};\n"],"mappings":"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","names":["elizaLogger","composeContext","ModelClass","Service","ServiceType","tavily","composeContext","ModelClass","elizaLogger"]}